PARSER_BEGIN(Assignment)


import java.util.*;


// Parser class
public class Assignment {

    public static void main(String args []) {
        // Instantain parser object
        Assignment parser = new Assignment(System.in);

        try {
            // Attempt to parse and then evaluate a PLM program
            int result = parser.program();
            // Report successful numerical evaluation
            System.out.println("PASS");
            System.out.println(result);

        } catch (ParseException e) {
            // Print failure to the standard output stream
            System.out.println("FAIL");

            // DEBUG
            StringBuffer s = new StringBuffer();
            s.append("at [" + e.currentToken + "] kind [" + e.tokenImage[e.currentToken.kind] + "]\n");
            s.append("encountered [" + e.currentToken.next + "] kind [" + e.tokenImage[e.currentToken.next.kind] + "]\n");
            s.append("expected ");
            for(int[] i : e.expectedTokenSequences) {
                for(int j : i) {
                    s.append("[" + e.tokenImage[j] + "], ");
                }
            }
            System.err.println("\n" + s.toString());

            // Decode ParseException
            String message = formMessage(e);
            int line = e.currentToken.next.beginLine;

            // Output line number and message to error stream
            System.err.println(line);
            System.err.println(message);

        } catch (MyParseException e) {
            // Print failure to the standard output stream
            System.out.println("FAIL");
            // Output line number and error message to error stream
            System.err.println(e.getLine());
            System.err.println(e.getMessage());

        } catch (DivergenceException e) {
            System.out.println("PASS");
            System.out.println("DIVERGENCE");
        }
    }

    private static String formMessage(ParseException e) {
        int at = e.currentToken.kind;
        int found = e.currentToken.next.kind;
        Set<Integer> expected = new HashSet();

        // Form a set of expected token kinds
        for (int[] i : e.expectedTokenSequences)
            expected.add(i[0]);

        //

        if (found == SPACE)
            return "Unexpected space";

        if (expected.contains(SPACE)) {
            switch (found) {
                case LBRACE:
                case RBRACE:
                case SCOLON:
                case NEWLINE:
                case EOF:
                    return "Missing whitespace";
            }
        }

        if (expected.contains(DEF))
            return "Missing keyword DEF";

        if (expected.contains(FUNCTION_NAME) && !expected.contains(INTEGER_LITERAL))
            return "Missing function name";

        if (expected.contains(FUNCTION_NAME) && found == MAIN)
            return "Duplicate MAIN definition";

        if (at == FUNCTION_NAME)
            return "Invalid function name";

        if (expected.contains(PARAMETER_NAME) && expected.size() == 1)
            return "Missing parameter name";

        if (at == PARAMETER_NAME)
            return "Invalid parameter name";

        if (expected.contains(LBRACE)) {
            if (found == PARAMETER_NAME) {
                return "MAIN definition should have no parameter";
            } else {
                return "Missing {";
            }
        }

        if (expected.contains(RBRACE))
            return "Missing }";

        if (expected.contains(LBRACK))
            return "Missing (";

        if (expected.contains(LBRACK))
            return "Missing )";

        if (expected.contains(SCOLON))
            return "Missing ;";

        if (expected.contains(INTEGER_LITERAL) && expected.contains(PARAMETER_NAME) && expected.contains(FUNCTION_NAME)) {
            if (at == LBRACK) {
                return "Missing function call argument";

            } else if (at == SPACE) {
                switch (found) {
                    case RBRACE:
                    case NEWLINE:
                    case EOF:
                        return "Missing function body";
                    default:
                        return "Missing Literal";
                }
            }
        }

        switch (found) {
            case NEWLINE:
                return "Unexpected new line";
            case EOF:
                return "Unexpected end of file";
            case RBRACK:
                return "Unexpected )";
            case RBRACE:
                return "Unexpected }";
        }

        return "Unclassified parse error";
    }
}


class DivergenceException extends Exception {
}


class MyParseException extends Exception {
    private final int line;

    public MyParseException(String m, int line) {
        super(m);
        this.line = line;
    }

    public int getLine() {
        return line;
    }
}


// Defines a expression that can be evaluated given the host functions argument
interface IEvaluate {
    public int evaluate(int arg) throws MyParseException, DivergenceException;
}


class Literal implements IEvaluate {
    private int constant;
    private String call_name;
    private IEvaluate call_arg;
    private Type type;


    public Literal(int constant) {
        this.constant = constant;
        this.type = Type.CONST;
    }

    public Literal(String param) {
        this.type = Type.PARAM;
    }

    public Literal(String call_name, IEvaluate call_arg, int line) {
        this.call_name = call_name;
        this.call_arg = call_arg;
        this.type = Type.CALL;
        // Acknowledge this function call
        Program.registerCall(call_name, line);
    }

    @Override
    public int evaluate(int arg) throws MyParseException, DivergenceException {
        // Provide a different evaluation based on literal type
        switch(type) {
            case CONST:
                // Return the boxed constant
                return constant;
            case PARAM:
                // The literal references the parameter, return the argument
                return arg;
            case CALL:
                // Evaluate the argument and call the function with the value
                int value = call_arg.evaluate(arg);
                return Program.call(call_name, value);
            default:
                throw new Error("FATAL: null literal type");
        }
    }

    // Enumeration of possible Literal types
    private enum Type {
        CONST, PARAM, CALL
    }
}

class BinFold implements IEvaluate {
    private final IEvaluate base;
    private final List<IEvaluate> operands;
    private final Type type;


    public BinFold(IEvaluate base, List<IEvaluate> operands, Type type) {
        this.base = base;
        this.operands = operands;
        this.type = type;
    }

    @Override
    public int evaluate(int arg) throws MyParseException, DivergenceException {
        // Evaluate the base into result
        int result = base.evaluate(arg);

        // Fold the other terms into result using the appropriate binary op
        for (IEvaluate o : operands){
            switch (type) {
                case MUL:
                    result *= o.evaluate(arg);
                    break;
                case PLUS:
                    result += o.evaluate(arg);
                    break;
                default:
                    throw new Error("FATAL: null BinFold type");
            }
        }
        return result;
    }

    // Enumeration of possible BinFold types
    enum Type {
        MUL, PLUS
    }
}

class Function {
    public final String name;
    public final String param;
    public final IEvaluate body;
    public final int line;


    public Function(String name, String param, IEvaluate body, int line) {
        this.name = name;
        this.param = param;
        this.body = body;
        this.line = line;
    }
}

class Program {
    private static final Map<String, Function> functions = new HashMap();
    private static final Map<String, Integer> undefined_calls = new HashMap();
    private static final Stack<String> call_stack = new Stack();


    public static int call(String name, int arg) throws MyParseException, DivergenceException {
        // Check for a recursive stack trace
        if (Program.call_stack.contains(name)) {
            throw new DivergenceException();
        }

        // Get the function
        Function function = Program.functions.get(name);

        // Evaluate the function call and regulate the call stack
        Program.call_stack.push(name);
        int result = function.body.evaluate(arg);
        Program.call_stack.pop();

        return result;
    }

    public static void registerFunction(Function f) throws MyParseException {
        // Check the definition is distinct
        if (Program.functions.containsKey(f.name)) {
            throw new MyParseException("Duplicate function definition " + f.name, f.line);
        } else {
            // Register a function object in the programs function map
            Program.functions.put(f.name, f);
            // Resolve any undefined calls to the function
            undefined_calls.remove(f.name);
        }
    }

    public static void registerCall(String name, int line) {
        // If the function is undefined, store the call
        if (!Program.functions.containsKey(name)) {
            undefined_calls.putIfAbsent(name, line);
        }
    }

    public static void validate() throws MyParseException {
        // If the MAIN function has not been defined, throw an error
        if (!Program.functions.containsKey("MAIN")) {
            throw new MyParseException("Undefined MAIN function", 0);
        }

        // If there is a call to an undefined function, throw an error
        if (!undefined_calls.isEmpty()) {
            // Extract first undefined function call and its line number
            Map.Entry entry = undefined_calls.entrySet().iterator().next();

            throw new MyParseException("Undefined function " + entry.getKey(),
                                                      (int) entry.getValue());
        }
    }
}


PARSER_END(Assignment)


// No skip tokens, unnecessary tokens should result in a parse failure

// PLM token descriptor
TOKEN:
{
    <DEF: "DEF"> | <MAIN: "MAIN"> | <LBRACE: "{"> | <RBRACE: "}"> |
    <LBRACK: "("> | <RBRACK: ")"> | <SCOLON: ";"> | <SPACE: " "> |
    <NEWLINE: "\n"> | <PLUS: "+"> | <MUL: "*"> |
    <INTEGER_LITERAL: (["0"-"9"])+> | <FUNCTION_NAME: (["A"-"Z"])+> |
    <PARAMETER_NAME: (["a"-"z"])+>
}


IEvaluate factor(String param) throws MyParseException:
{
    Token t; IEvaluate call_arg;
}
{
    t = <INTEGER_LITERAL>
        {   // Return the constant value boxed as a Literal
            return new Literal(Integer.parseInt(t.image));
        }

    | t = <PARAMETER_NAME>
        {
            String var = t.image;
            // Check the variable matches the parent functions parameter
            if (!var.equals(param)) {
                throw new MyParseException("Undefined variable " + var, t.beginLine);
            }
            // Return the parameter reference boxed as a Literal
            return new Literal(param);
        }

    | t = <FUNCTION_NAME> "(" call_arg = expr(param) ")"
        {   // Return the function call boxed as a Literal
            return new Literal(t.image, call_arg, t.beginLine);
        }
}


IEvaluate term(String p) throws MyParseException:
{
    IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList();
}
{
    lhs = factor(p) (LOOKAHEAD(2) <MUL> rhs = term(p)
        { operands.add(rhs); }
    )*

    {   // Return an object respresentation of a multiplicative fold on factors
        return new BinFold(lhs, operands, BinFold.Type.MUL);
    }
}


IEvaluate expr(String p) throws MyParseException:
{
    IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList();
}
{
    lhs = term(p) (LOOKAHEAD(2) <PLUS> rhs = expr(p)
        { operands.add(rhs); }
    )*

    {   // Return an object respresentation of a addative fold on terms
        return new BinFold(lhs, operands, BinFold.Type.PLUS);
    }
}


Function function() throws MyParseException:
{
    Token t1, t2 = new Token(); IEvaluate body;
}
{
    <DEF> <SPACE>                           // Function signature
        ( t1 = <FUNCTION_NAME> <SPACE> t2 = <PARAMETER_NAME> | t1 = <MAIN> )

    <SPACE> <LBRACE> <SPACE>                // Function body
        body = expr(t2.image)
    <SPACE> <RBRACE> <SPACE> <SCOLON> <NEWLINE>

    {   // Define a new function using the name, parameter, body and line number
        return new Function(t1.image, t2.image, body, t1.beginLine);
    }
}

int program() throws MyParseException, DivergenceException:
{
    IEvaluate body; Function f;
}
{
    // Parse the program as a set of functions
    (f = function()
        { Program.registerFunction(f); }
    )+
    <EOF>

    {   // Validate the program
        Program.validate();
        // After parsing the whole program, run the main body with a dummy arg
        return Program.call("MAIN", Integer.MIN_VALUE);
    }
}
