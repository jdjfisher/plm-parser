
PARSER_BEGIN(Assignment)

public class Assignment {

    public static void main(String args []) {
        Assignment parser = new Assignment(System.in);

        try {
            int result = parser.program();
            System.out.println("PASS");
            System.out.println(result);
        } catch (Throwable e) {
            System.out.println("FAIL");
            System.err.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Assignment)

TOKEN : {
    "DEF" | "MAIN" | "(" | ")" | "{" | "}" | ";" |
    <SPACE: " "> | <NEWLINE: "\n"> |
    <PLUS: "+"> | <MUL: "*"> |
    <INTEGER_LITERAL: (["0"-"9"])+> |
    <FUNCTION_NAME: (["A"-"Z"])+> |
    <PARAMETER_NAME: (["a"-"z"])+>
}

int factor():
{Token t; int eval;}
{
    t = <INTEGER_LITERAL>
        {return Integer.parseInt(t.image);}

    | <PARAMETER_NAME>
        {return 0;}

    | <FUNCTION_NAME> "(" eval = expr() ")"
        {return 0;}
}

int term():
{int result, rhs;}
{
    result = factor() (<MUL> rhs = term()
        {result *= rhs;}
    )*

    {return result;}
}

int expr():
{int result, rhs;}
{
    result = term() (<PLUS> rhs = expr()
        {result += rhs;}
    )*

    {return result;}
}

void function():
{}
{
    "DEF " <FUNCTION_NAME> " " <PARAMETER_NAME> " { " expr() " } ;" <NEWLINE>
}

int main():
{int result;}
{
    "DEF MAIN { " result = expr() " } ;" <NEWLINE>
        {return result;}
}

int program():
{int result;}
{
    (function())*
    result = main()
    (function())*
    <EOF>
        {return result;}
}
