PARSER_BEGIN(Assignment)

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;


public class Assignment {

    public static void main(String args []) {
        Assignment parser = new Assignment(System.in);

        try {
            int result = parser.program();
            System.out.println("PASS");
            System.out.println(result);
        } catch (Throwable e) {
            System.out.println("FAIL");
            System.err.println("Syntax check failed: " + e.getMessage());
        }
    }
}

interface IEvaluate {
    public int evaluate(String param, int arg) throws ParseException;
}


class Literal implements IEvaluate {
    private int constant;
    private String var;
    private String call;
    private IEvaluate arg;
    private Type type;

    private IEvaluate jeff;

    public Literal(int constant) {
        this.constant = constant;
        this.type = Type.CONST;
    }

    public Literal(String var) {
        this.var = var;
        this.type = Type.VAR;
    }

    public Literal(String call, IEvaluate arg) {
        this.call = call;
        this.arg = arg;
        this.type = Type.CALL;
    }

    @Override
    public int evaluate(String param, int arg) throws ParseException {
        switch(this.type) {
            case CONST:
                return constant;
            case VAR:
                if (this.var.equals(param)) {
                    return arg;
                } else {
                    throw new ParseException("undefined variable " + this.param);
                }
            case CALL:
                int arg_value = this.arg.evaluate(param, arg);

                return Function.call(call, arg_value);
        }

        throw new ParseException("unknown literal type");
    }

    private enum Type {
        CONST, VAR, CALL
    }
}

class BinFold implements IEvaluate {
    private final IEvaluate base;
    private final List<IEvaluate> operands;
    private final Type type;

    public BinFold(IEvaluate base, List<IEvaluate> operands, Type type) {
        this.base = base;
        this.operands = operands;
        this.type = type;
    }

    @Override
    public int evaluate(String param, int arg) throws ParseException {
        int result = base.evaluate(param, arg);

        for (IEvaluate o : operands){
            switch (type) {
                case MUL:
                    result *= o.evaluate(param, arg);
                    break;
                case PLUS:
                    result += o.evaluate(param, arg);
                    break;
            }
        }
        return result;
    }

    enum Type {
        MUL, PLUS
    }
}

class Function {
    private static Map<String, Function> functions = new HashMap();

    public static int call(String name, int arg) throws ParseException {
        if (Function.functions.containsKey(name)) {
            Function f = functions.get(name);
            return f.call(arg);
        } else {
            throw new ParseException("undefined function " + name);
        }
    }

    public static void define(String name, String param, IEvaluate body) throws ParseException{
        if (Function.functions.containsKey(name)) {
            throw new ParseException("duplicate function definition " + name);
        } else {
            Function.functions.put(name, new Function(name, param, body));
        }
    }

    public final String name;
    public final String param;
    public final IEvaluate body;

    private Function(String name, String param, IEvaluate body) {
        this.name = name;
        this.param = param;
        this.body = body;
    }

    public int call(int arg) throws ParseException {
        return this.body.evaluate(this.param, arg);
    }
}

PARSER_END(Assignment)

TOKEN : {
    "DEF" | "MAIN" | "(" | ")" | "{" | "}" | ";" |
    <SPACE: " "> | <NEWLINE: "\n"> |
    <PLUS: "+"> | <MUL: "*"> |
    <INTEGER_LITERAL: (["0"-"9"])+> |
    <FUNCTION_NAME: (["A"-"Z"])+> |
    <PARAMETER_NAME: (["a"-"z"])+>
}

IEvaluate factor():
{ Token t; IEvaluate arg; }
{
    t = <INTEGER_LITERAL>
        { return new Literal(Integer.parseInt(t.image)); }

    | t = <PARAMETER_NAME>
        { return new Literal(t.image); }

    | t = <FUNCTION_NAME> "(" arg = expr() ")"
        { return new Literal(t.image, arg); }
}

IEvaluate term():
{ IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList(); }
{
    lhs = factor() (<MUL> rhs = term()
        { operands.add(rhs); }
    )*

    {
        return new BinFold(lhs, operands, BinFold.Type.MUL);
    }
}

IEvaluate expr():
{ IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList(); }
{
    lhs = term() (<PLUS> rhs = expr()
        { operands.add(rhs); }
    )*

    {
        return new BinFold(lhs, operands, BinFold.Type.PLUS);
    }
}

void function():
{ Token t1, t2; IEvaluate body; }
{
    "DEF " t1 = <FUNCTION_NAME> " " t2 = <PARAMETER_NAME> " { " body = expr() " } ;" <NEWLINE>
    {
        Function.define(t1.image, t2.image, body);
    }
}

IEvaluate main():
{ IEvaluate body; }
{
    "DEF MAIN { " body = expr() " } ;" <NEWLINE>
    {
        return body;
    }
}

int program():
{ IEvaluate body; }
{
    (function())*
    body = main()
    (function())*
    <EOF>
    {
        return body.evaluate(null, Integer.MIN_VALUE);
    }
}
