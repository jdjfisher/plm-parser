PARSER_BEGIN(Assignment)


import java.util.*;


// Parser class
public class Assignment {

    public static void main(String args []) {
        // Instantain parser object
        Assignment parser = new Assignment(System.in);

        try {
            // Attempt to parse and then evaluate a PLM program
            int result = parser.program();
            // Report successful numerical evaluation
            System.out.println("PASS");
            System.out.println(result);

        } catch (ParseException e) {
            // Print failure to the standard output stream
            System.out.println("FAIL");

            // DEBUG
            StringBuffer s = new StringBuffer();
            s.append("at [" + e.currentToken + "] kind [" + e.tokenImage[e.currentToken.kind] + "]\n");
            s.append("encountered [" + e.currentToken.next + "] kind [" + e.tokenImage[e.currentToken.next.kind] + "]\n");
            s.append("expected ");
            for(int[] i : e.expectedTokenSequences) {
                for(int j : i) {
                    s.append("[" + e.tokenImage[j] + "], ");
                }
            }
            System.err.println("\n" + s.toString());


            // Decode ParseException
            String message = formMessage(e);
            int line = e.currentToken.next.beginLine;

            // Output line number and message to error stream
            System.err.println(line);
            System.err.println(message);

        } catch (MyParseException e) {
            // Print failure to the standard output stream
            System.out.println("FAIL");
            // Output line number and error message to error stream
            System.err.println(e.getLine());
            System.err.println(e.getMessage());

        } catch (DivergenceException e) {
            System.out.println("PASS");
            System.out.println("DIVERGENCE");
        }
    }

    private static String formMessage(ParseException e) {
        int expectedTokenKind = e.expectedTokenSequences[0][0];
        Token currentToken = e.currentToken;
        Token nextToken = e.currentToken.next;

        switch (nextToken.kind) {
            case SPACE:
                return "Unexpected space";
            case NEWLINE:
                return "Unexpected new line";
        }

        switch (expectedTokenKind) {
            case DEF:
                return "Missing keyword DEF";
            case MAIN:
                return "Missing MAIN function";
            case FUNCTION_NAME:
                if (nextToken.kind == MAIN) {
                    return "Duplicate MAIN definition";
                }
                return "Missing function name";
            case PARAMETER_NAME:
                return "Missing parameter name";
            case SPACE:
                switch (nextToken.kind) {
                    case LBRACE:
                    case RBRACE:
                    case SCOLON:
                    case NEWLINE:
                    case EOF:
                        return "Missing space after " + currentToken;
                    default:
                        switch (currentToken.kind) {
                            case FUNCTION_NAME:
                                return "Invalid function name " + currentToken.image + nextToken.image + "...";
                            case PARAMETER_NAME:
                                return "Invalid parameter name " + currentToken.image + nextToken.image + "...";
                        }                    
                }
            case LBRACE:
                if (nextToken.kind == PARAMETER_NAME) {
                    return "MAIN definition should have no parameter";
                }
            case RBRACE:
            case SCOLON:
                return "Missing " + e.tokenImage[expectedTokenKind];
            case INTEGER_LITERAL:
                return "Missing function body";
            case EOF:
                return "Missing end of file character";
        }

        return "Unclassified parse error";
    }
}


class DivergenceException extends Exception {
}


class MyParseException extends Exception {
    private final int line;

    public MyParseException(String m, int line) {
        super(m);
        this.line = line;
    }

    public int getLine() {
        return line;
    }
}


// Defines a expression that can be evaluated given the host functions argument
interface IEvaluate {
    public int evaluate(int arg) throws MyParseException, DivergenceException;
}


class Literal implements IEvaluate {
    private int constant;
    private String call_name;
    private IEvaluate call_arg;
    private Type type;

    public Literal(int constant) {
        this.constant = constant;
        this.type = Type.CONST;
    }

    public Literal(String param) {
        this.type = Type.PARAM;
    }

    public Literal(String call_name, IEvaluate call_arg, int line) {
        this.call_name = call_name;
        this.call_arg = call_arg;
        this.type = Type.CALL;
        // Make function manager acknowledge this defined call
        Function.registerCall(call_name, line);
    }

    @Override
    public int evaluate(int arg) throws MyParseException, DivergenceException {
        // Provide a different evaluation based on literal type
        switch(type) {
            case CONST:
                // Return the boxed constant
                return constant;
            case PARAM:
                // The literal references the parameter, return the argument
                return arg;
            case CALL:
                // Evaluate the argument and call the function with the value
                int value = call_arg.evaluate(arg);
                return Function.call(call_name, value);
            default:
                throw new Error("FATAL: null literal type");
        }
    }

    // Enumeration of possible Literal types
    private enum Type {
        CONST, PARAM, CALL
    }
}

class BinFold implements IEvaluate {
    private final IEvaluate base;
    private final List<IEvaluate> operands;
    private final Type type;

    public BinFold(IEvaluate base, List<IEvaluate> operands, Type type) {
        this.base = base;
        this.operands = operands;
        this.type = type;
    }

    @Override
    public int evaluate(int arg) throws MyParseException, DivergenceException {
        // Evaluate the base into result
        int result = base.evaluate(arg);

        // Fold the other terms into result using the appropriate binary op
        for (IEvaluate o : operands){
            switch (type) {
                case MUL:
                    result *= o.evaluate(arg);
                    break;
                case PLUS:
                    result += o.evaluate(arg);
                    break;
                default:
                    throw new Error("FATAL: null BinFold type");
            }
        }
        return result;
    }

    // Enumeration of possible BinFold types
    enum Type {
        MUL, PLUS
    }
}

class Function {
    private static final Map<String, Function> functions = new HashMap();
    private static final Map<String, Integer> undefined_calls = new HashMap();
    private static final Stack<String> call_stack = new Stack();


    public static int call(String name, int arg) throws MyParseException, DivergenceException {
        // Call the function
        return functions.get(name).call(arg);
    }

    public static void define(String name, String param, IEvaluate body, int line) throws MyParseException {
        // Check the definition is distinct
        if (Function.isDefined(name)) {
            throw new MyParseException("Duplicate function definition " + name, line);
        } else {
            // Register a function object in the programs function map
            Function.functions.put(name, new Function(name, param, body));
            // Resolve any undefined calls to the function
            undefined_calls.remove(name);
        }
    }

    public static void registerCall(String name, int line) {
        // If the function is undefined, store the call
        if (!Function.isDefined(name)) {
            undefined_calls.putIfAbsent(name, line);
        }
    }

    public static boolean isDefined(String name) {
        // Query the function map
        return functions.containsKey(name);
    }

    public static void validateCalls() throws MyParseException {
        // If there is an undefined function call, throw an error
        if (!undefined_calls.isEmpty()) {
            // Extract first undefined function call and its line number
            Map.Entry entry = undefined_calls.entrySet().iterator().next();
            // Throw an appropriate exception
            throw new MyParseException("Undefined function call " +
                entry.getKey(), (int) entry.getValue());
        }
    }

    public final String name;
    public final String param;
    public final IEvaluate body;

    private Function(String name, String param, IEvaluate body) {
        this.name = name;
        this.param = param;
        this.body = body;
    }

    public int call(int arg) throws MyParseException, DivergenceException {
        // Check for a recursive stack trace
        if (Function.call_stack.contains(name)) {
            throw new DivergenceException();
        }

        // Evaluate the function call and regulate the call stack
        Function.call_stack.push(name);
        int result = this.body.evaluate(arg);
        Function.call_stack.pop();

        return result;
    }
}


PARSER_END(Assignment)


// No skip tokens, unnecessary tokens should result in a parse failure

// PLM token descriptor
TOKEN : {
    <DEF: "DEF"> | <MAIN: "MAIN"> | <LBRACE: "{"> | <RBRACE: "}"> | "(" | ")" |
    <SCOLON: ";"> | <SPACE: " "> | <NEWLINE: "\n"> | <PLUS: "+"> | <MUL: "*"> |
    <INTEGER_LITERAL: (["0"-"9"])+> | <FUNCTION_NAME: (["A"-"Z"])+> |
    <PARAMETER_NAME: (["a"-"z"])+>
}


IEvaluate factor(String param) throws MyParseException:
{ Token t; IEvaluate call_arg; }
{
    t = <INTEGER_LITERAL>
        // Return the constant value boxed as a Literal
        { return new Literal(Integer.parseInt(t.image)); }

    | t = <PARAMETER_NAME>
        {
            String var = t.image;
            // Check the variable matches the parent functions parameter
            if (!var.equals(param)) {
                throw new MyParseException("Undefined variable " + var, t.beginLine);
            }
            // Return the parameter reference boxed as a Literal
            return new Literal(param);
        }

    | t = <FUNCTION_NAME> "(" call_arg = expr(param) ")"
        // Return the function call boxed as a Literal
        { return new Literal(t.image, call_arg, t.beginLine); }
}


IEvaluate term(String p) throws MyParseException:
{ IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList(); }
{
    lhs = factor(p) (LOOKAHEAD(2) <MUL> rhs = term(p)
        { operands.add(rhs); }
    )*
    // Return an object respresentation of a multiplicative fold on factors
    { return new BinFold(lhs, operands, BinFold.Type.MUL); }
}


IEvaluate expr(String p) throws MyParseException:
{ IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList(); }
{
    lhs = term(p) (LOOKAHEAD(2) <PLUS> rhs = expr(p)
        { operands.add(rhs); }
    )*
    // Return an object respresentation of a addative fold on terms
    { return new BinFold(lhs, operands, BinFold.Type.PLUS); }
}


void function() throws MyParseException:
{ Token t1, t2, t3; IEvaluate body; }
{
    <DEF> " " t1 = <FUNCTION_NAME> " " t2 = <PARAMETER_NAME> " " <LBRACE> " "
    body = expr(t2.image) " " <RBRACE> " " <SCOLON> t3 = <NEWLINE>
    // Define a new function using the name, parameter and body
    { Function.define(t1.image, t2.image, body, t3.beginLine); }
}


IEvaluate main() throws MyParseException:
{ IEvaluate body; }
{
    <DEF> " " <MAIN> " " <LBRACE> " " body = expr(null) " " <RBRACE> " "
    <SCOLON> <NEWLINE>
    // Return the main body entry point
    { return body; }
}


int program() throws MyParseException, DivergenceException:
{ IEvaluate body; }
{
    // Parse the program
    (LOOKAHEAD(3) function())*
    body = main()
    (function())*
    <EOF>
    {
        // Verify that all function calls are defined
        Function.validateCalls();
        // After parsing the whole program, evaluate the main body with dummy argument
        return body.evaluate(Integer.MIN_VALUE);
    }
}
