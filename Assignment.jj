
PARSER_BEGIN(Assignment)


// Standard library imports
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.*;


// JavaCC Parser class
public class Assignment {

    public static void main(String args []) {
        // Instantain parser object on the PLM program
        Assignment parser = new Assignment(System.in);

        try {
            // Attempt to parse and then evaluate the PLM program
            int result = parser.program();

            // Report evaluation
            System.out.println("PASS");
            System.out.println(Program.diverges() ? "DIVERGENCE" : result);

        } catch (Throwable t) {
            // Print failure to the standard output stream
            System.out.println("FAIL");
            int line = 0;
            String message = "Unclassified parse error";

            try {
                // Pass the Throwable to the specific handlers
                throw t;

            } catch (MyParseException e) {
                // Decode MyParseException
                line = e.getLine();
                message = e.getMessage();

            } catch(ParseException e) {
                // Decode ParseException
                line = e.currentToken.next.beginLine;
                message = decodeParseException(e);

            } catch(TokenMgrError e) {
                // Decode TokenMgrError
                Matcher matcher = Pattern.compile("line \\d+").matcher(e.getMessage());
                if (matcher.find())
                    line = Integer.parseInt(matcher.group().replace("line ", ""));

                message = "Unknown symbol";
            }

            // Output line number and message to error stream
            System.err.println(line);
            System.err.println(message);
        }
    }

    private static String decodeParseException(ParseException e) {
        int at = e.currentToken.kind;
        int found = e.currentToken.next.kind;
        String str = e.currentToken.image + e.currentToken.next.image + "...";

        // Form the set of expected token kinds
        Set<Integer> expected = new HashSet();
        for (int[] i : e.expectedTokenSequences) {
            expected.add(i[0]);
        }

        // Determine an appropriate error message from the caught
        // tokens via case analysis

        if (found == SPACE)
            return "Unexpected space";

        if (expected.contains(DEF))
            return "Missing keyword DEF";

        if (expected.contains(SPACE)) {
            switch (found) {
                case LBRACE:
                case RBRACE:
                case SCOLON:
                case NEWLINE:
                case EOF:
                    return "Missing whitespace";
            }
        }

        if (expected.contains(FUNCTION_NAME) && expected.contains(MAIN))
            return "Missing function name";

        if ((at == FUNCTION_NAME || at == MAIN) && expected.contains(SPACE))
            return "Invalid function name " + str;

        if (expected.contains(PARAMETER_NAME) && expected.size() == 1)
            return "Missing parameter name";

        if (at == PARAMETER_NAME) {
            if (expected.contains(SPACE) && expected.size() == 1) {
                return "Invalid parameter name " + str;
            } else {
                return "Invalid parameter reference " + str;
            }
        }

        if (expected.contains(LBRACE)) {
            if (found == PARAMETER_NAME) {
                return "MAIN definition should have no parameter";
            } else {
                return "Missing {";
            }
        }

        if (at == FUNCTION_NAME && expected.contains(LBRACK))
            return "Invalid function call " + str;

        if (expected.contains(INTEGER_LITERAL) && expected.contains(PARAMETER_NAME) && expected.contains(FUNCTION_NAME)) {
            if (at == LBRACK) {
                return "Missing function call argument";

            } else if (at == SPACE) {
                switch (found) {
                    case RBRACE:
                    case NEWLINE:
                    case EOF:
                        return "Missing function body";
                    default:
                        return "Missing Literal";
                }
            }
        }

        switch (at) {
            case INTEGER_LITERAL:
            case PARAMETER_NAME:
            case FUNCTION_NAME:
                if (found == PLUS || found == MUL) {
                    return "Missing operand " + str;
                }
        }

        if (expected.contains(RBRACK))
            return "Missing )";

        if (expected.contains(RBRACE))
            return "Missing }";

        if (expected.contains(SCOLON))
            return "Missing ;";

        switch (found) {
            case NEWLINE:
                return "Unexpected new line";
            case EOF:
                return "Unexpected end of file";
        }

        // Error type could not be inferred, default to this
        return "Unclassified parse error";
    }
}


// Exception wrapper for tracking PLM line number
class MyParseException extends Exception {
    private final int line;

    // Constructor
    public MyParseException(String message, int line) {
        super(message);
        this.line = line;
    }

    public int getLine() {
        return line;
    }
}


// Defines a expression that can be evaluated given the host functions argument
interface IEvaluate {
    public int evaluate(int arg) throws MyParseException;
}


// Literal expression construct
class Literal implements IEvaluate {
    private int constant;
    private String callName;
    private IEvaluate callArg;
    private Type type;

    // Constructor
    public Literal(int constant) {
        this.constant = constant;
        this.type = Type.CONST;
    }

    // Constructor
    public Literal(String param) {
        this.type = Type.PARAM;
    }

    // Constructor
    public Literal(String callName, IEvaluate callArg, int line) {
        this.callName = callName;
        this.callArg = callArg;
        this.type = Type.CALL;
        // Acknowledge this function call
        Program.registerCall(callName, line);
    }

    @Override
    public int evaluate(int arg) throws MyParseException {
        // Provide a different evaluation based on literal type
        switch(type) {
            case CONST:
                // Return the boxed constant
                return constant;
            case PARAM:
                // The literal references the parameter, return the argument
                return arg;
            case CALL:
                // Evaluate the argument and call the function with the value
                int value = callArg.evaluate(arg);
                return Program.call(callName, value);
            default:
                throw new Error("FATAL: null literal type");
        }
    }

    // Enumeration of possible Literal types
    private enum Type {
        CONST, PARAM, CALL
    }
}


// Binary operation fold expression construct
class BinFold implements IEvaluate {
    private final IEvaluate base;
    private final List<IEvaluate> operands;
    private final Type type;

    // Constructor
    public BinFold(IEvaluate base, List<IEvaluate> operands, Type type) {
        this.base = base;
        this.operands = operands;
        this.type = type;
    }

    @Override
    public int evaluate(int arg) throws MyParseException {
        // Evaluate the base into result
        int result = base.evaluate(arg);

        // Fold the other terms into result using the appropriate binary op
        for (IEvaluate o : operands){
            switch (type) {
                case MUL:
                    result *= o.evaluate(arg);
                    break;
                case PLUS:
                    result += o.evaluate(arg);
                    break;
                default:
                    throw new Error("FATAL: null BinFold type");
            }
        }
        return result;
    }

    // Enumeration of possible BinFold types
    enum Type {
        MUL, PLUS
    }
}


// Function construct
class Function implements IEvaluate {
    public final String name;
    public final String param;
    public final IEvaluate body;
    public final int line;

    // Constructor
    public Function(String name, String param, IEvaluate body, int line) {
        this.name = name;
        this.param = param;
        this.body = body;
        this.line = line;
    }

    @Override
    public int evaluate(int arg) throws MyParseException {
        return body.evaluate(arg);
    }
}

class Program {
    private static final Map<String, Function> functions = new HashMap();
    private static final Map<String, Integer> undefinedCalls = new HashMap();
    private static final Stack<String> callStack = new Stack();
    private static boolean divergence = false;

    // Call a defined function
    public static int call(String name, int arg) throws MyParseException {
        // Check for a recursive stack trace and skip next call if found
        if (Program.callStack.contains(name)) {
            divergence = true;
            return arg;
        }

        // Get the function
        Function function = Program.functions.get(name);

        // Evaluate the function call and regulate the call stack
        Program.callStack.push(name);
        int result = function.evaluate(arg);
        Program.callStack.pop();

        return result;
    }

    // Register a distinct function definition
    public static void registerFunction(Function f) throws MyParseException {
        // Check the definition is distinct
        if (Program.functions.containsKey(f.name)) {
            throw new MyParseException("Duplicate function definition " + f.name, f.line);
        } else {
            // Register a function object in the programs function map
            Program.functions.put(f.name, f);
            // Resolve any undefined calls to the function
            undefinedCalls.remove(f.name);
        }
    }

    // Register a potentially unmatched function call
    public static void registerCall(String name, int line) {
        // If the function is undefined, store the call
        if (!Program.functions.containsKey(name)) {
            undefinedCalls.putIfAbsent(name, line);
        }
    }

    // Validate the program
    public static void validate() throws MyParseException {
        // If the MAIN function has not been defined, throw an error
        if (!Program.functions.containsKey("MAIN")) {
            throw new MyParseException("Undefined MAIN function", 0);
        }

        // If there is a call to an undefined function, throw an error
        if (!undefinedCalls.isEmpty()) {
            // Extract first undefined function call and its line number
            Map.Entry entry = undefinedCalls.entrySet().iterator().next();

            throw new MyParseException("Undefined function " + entry.getKey(),
                                                      (int) entry.getValue());
        }
    }

    // Does the program diverge
    public static boolean diverges() {
        return divergence;
    }
}


PARSER_END(Assignment)


// PLM token descriptor. Note there are no defined skip tokens, unnecessary
// tokens should result in a parse failure
TOKEN:
{
    <DEF: "DEF"> | <MAIN: "MAIN"> | <LBRACE: "{"> | <RBRACE: "}"> |
    <LBRACK: "("> | <RBRACK: ")"> | <SCOLON: ";"> | <SPACE: " "> |
    <NEWLINE: "\n"> | <PLUS: "+"> | <MUL: "*"> |
    <INTEGER_LITERAL: (["0"-"9"])+> | <FUNCTION_NAME: (["A"-"Z"])+> |
    <PARAMETER_NAME: (["a"-"z"])+>
}


// factor/literal non-terminal
IEvaluate factor(String param) throws MyParseException:
{
    Token t; IEvaluate callArg;
}
{
    t = <INTEGER_LITERAL>
        {   // Return the constant value boxed as a Literal
            return new Literal(Integer.parseInt(t.image));
        }

    | t = <PARAMETER_NAME>
        {
            String var = t.image;
            // Check the variable matches the parent functions parameter
            if (!var.equals(param)) {
                throw new MyParseException("Undefined variable " + var, t.beginLine);
            }
            // Return the parameter reference boxed as a Literal
            return new Literal(param);
        }

    | t = <FUNCTION_NAME> "(" callArg = expr(param) ")"
        {   // Return the function call boxed as a Literal
            return new Literal(t.image, callArg, t.beginLine);
        }
}


// term non-terminal
IEvaluate term(String p) throws MyParseException:
{
    IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList();
}
{
    lhs = factor(p) (LOOKAHEAD(2) <MUL> rhs = term(p)
        { operands.add(rhs); }
    )*

    {   // Return an object respresentation of a multiplicative fold on factors
        return new BinFold(lhs, operands, BinFold.Type.MUL);
    }
}


// expression non-terminal
IEvaluate expr(String p) throws MyParseException:
{
    IEvaluate lhs, rhs; List<IEvaluate> operands = new ArrayList();
}
{
    lhs = term(p) (LOOKAHEAD(2) <PLUS> rhs = expr(p)
        { operands.add(rhs); }
    )*

    {   // Return an object respresentation of a addative fold on terms
        return new BinFold(lhs, operands, BinFold.Type.PLUS);
    }
}


// function non-terminal
Function function() throws MyParseException:
{
    Token t1, t2 = new Token(); IEvaluate body;
}
{
    <DEF> <SPACE>                                      // Function signature
        ( t1 = <FUNCTION_NAME> <SPACE> t2 = <PARAMETER_NAME> | t1 = <MAIN> )

    <SPACE> <LBRACE> <SPACE>
        body = expr(t2.image)   // Function body
    <SPACE> <RBRACE> <SPACE> <SCOLON> <NEWLINE>

    {   // Define a new function using the name, parameter, body and line number
        return new Function(t1.image, t2.image, body, t1.beginLine);
    }
}


// program root non-terminal
int program() throws MyParseException:
{
    IEvaluate body; Function f;
}
{
    // Parse the program as a set of functions
    (f = function()
        { Program.registerFunction(f); }
    )+
    <EOF>

    {   // Validate the program
        Program.validate();
        // After parsing the whole program, run the main body with a dummy arg
        return Program.call("MAIN", Integer.MIN_VALUE);
    }
}
